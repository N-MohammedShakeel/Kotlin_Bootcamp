Kotlin Generics: Detailed Explanation
=====================================

This document provides a comprehensive explanation of Kotlin Generics, tailored for a beginner with experience in Kotlin basics, OOP, design patterns, collections, functional programming, coroutines, generics, and Java, interested in Android development. It covers defining generic classes, functions, and interfaces, variance (`out` for covariance, `in` for contravariance), type constraints, and reified types with inline functions. The explanation includes examples, Java comparisons, Android use cases, and builds on your `TaskManager` console app experience, aligning with Stage 1: Advanced Kotlin Concepts.

1. What Are Generics?
--------------------

Generics in Kotlin allow types to be parameterized, enabling reusable, type-safe code that works with different data types. They are essential for creating flexible APIs, such as collections (`List<T>`) or ViewModels in Android.

**Why Use Generics?**
- **Type Safety**: Ensures compile-time type checks, preventing runtime errors (e.g., adding a `String` to a `List<Int>`).
- **Code Reusability**: Write one class/function for multiple types (e.g., a `Repository<T>` for `Task`, `User`).
- **Android Relevance**: Used in ViewModels, Room, and Jetpack libraries for flexible data handling.
- **Java Equivalent**: Java generics (e.g., `List<T>`), but Kotlinâ€™s syntax is more concise and supports variance (`out`, `in`) and reified types.

**From Your Knowledge**:
- Builds on **collections** (e.g., `List<T>`, `Map<K, V>`) and **OOP** (type safety, polymorphism).
- Relates to **design patterns** (e.g., generic repositories in repository pattern).

2. Defining Generic Classes, Functions, and Interfaces
-----------------------------------------------------

**Generic Classes**:
- **Definition**: Classes parameterized by a type `T`, allowing reusable logic for different types.
- **Syntax**:
  ```kotlin
  class Repository<T> {
      private val items = mutableListOf<T>()
      fun add(item: T) { items.add(item) }
  }
  ```
- **Example**:
  ```kotlin
  val taskRepo = Repository<Task>()
  taskRepo.add(Task(1, "Write code", 1))
  ```
- **Java Equivalent**:
  ```java
  class Repository<T> {
      private List<T> items = new ArrayList<>();
      public void add(T item) { items.add(item); }
  }
  ```
- **Use Case**: A generic ViewModel handling different data types (e.g., `Task`, `User`).

**Generic Functions**:
- **Definition**: Functions with type parameters, allowing flexible input/output types.
- **Syntax**:
  ```kotlin
  fun <T> printItem(item: T) {
      println("Item: $item")
  }
  ```
- **Example**:
  ```kotlin
  printItem("Hello") // Item: Hello
  printItem(42)      // Item: 42
  ```
- **Java Equivalent**:
  ```java
  <T> void printItem(T item) {
      System.out.println("Item: " + item);
  }
  ```
- **Use Case**: Utility functions in Android for processing lists of any type.

**Generic Interfaces**:
- **Definition**: Interfaces with type parameters, defining contracts for different types.
- **Syntax**:
  ```kotlin
  interface Processor<T> {
      fun process(item: T): String
  }
  ```
- **Example**:
  ```kotlin
  class TaskProcessor : Processor<Task> {
      override fun process(item: Task) = "Processed: ${item.title}"
  }
  ```
- **Java Equivalent**:
  ```java
  interface Processor<T> {
      String process(T item);
  }
  ```
- **Use Case**: Event handlers in Android for processing UI events.

**From Your Knowledge**:
- Aligns with **OOP** (interfaces, polymorphism) and **collections** (generic APIs like `List<T>`).

3. Variance: Covariance (`out`) and Contravariance (`in`)
-------------------------------------------------------

Variance controls how generic types relate to their subtypes or supertypes, crucial for flexible type hierarchies.

**Covariance (`out`)**:
- **Definition**: Allows a generic type to be treated as a supertype. A type `T` marked `out` can only be produced (returned), not consumed (as input).
- **Syntax**:
  ```kotlin
  interface Source<out T> {
      fun get(): T
      // Cannot have: fun set(item: T) // Error: T is out
  }
  ```
- **Example**:
  ```kotlin
  val taskSource: Source<Task> = object : Source<BasicTask> {
      override fun get() = BasicTask(1, "Task")
  }
  ```
- **Why Important?**: Enables `Source<BasicTask>` to be used as `Source<Task>`, like `List<out T>` in collections.
- **Java Equivalent**: `List<? extends T>`:
  ```java
  List<? extends Task> tasks = new ArrayList<BasicTask>();
  ```
- **Use Case**: Read-only lists in Android UI (e.g., displaying `List<out Task>`).

**Contravariance (`in`)**:
- **Definition**: Allows a generic type to be treated as a subtype. A type `T` marked `in` can only be consumed (as input), not produced (returned).
- **Syntax**:
  ```kotlin
  interface Consumer<in T> {
      fun consume(item: T)
      // Cannot have: fun get(): T // Error: T is in
  }
  ```
- **Example**:
  ```kotlin
  val taskConsumer: Consumer<BasicTask> = object : Consumer<Task> {
      override fun consume(item: Task) = println("Consumed: ${item.title}")
  }
  ```
- **Why Important?**: Allows `Consumer<Task>` to consume `BasicTask`, like `Comparator<in T>`.
- **Java Equivalent**: `Comparator<? super T>`:
  ```java
  Comparator<? super Task> comparator = (t1, t2) -> t1.getTitle().compareTo(t2.getTitle());
  ```
- **Use Case**: Processors handling task subtypes in Android.

**From Your Knowledge**:
- Relates to **OOP** (inheritance, polymorphism) and **collections** (e.g., `List<out T>`).

4. Type Constraints and Reified Types
------------------------------------

**Type Constraints**:
- **Definition**: Restrict generic types to specific supertypes using `T : SomeType`.
- **Syntax**:
  ```kotlin
  fun <T : Comparable<T>> sort(items: List<T>): List<T> = items.sorted()
  ```
- **Example**:
  ```kotlin
  val numbers = sort(listOf(3, 1, 2)) // [1, 2, 3]
  ```
- **Why Important?**: Ensures type safety by limiting valid types (e.g., `T` must be `Comparable`).
- **Java Equivalent**: `<T extends Comparable<T>>`:
  ```java
  <T extends Comparable<T>> List<T> sort(List<T> items) {
      Collections.sort(items);
      return items;
  }
  ```
- **Use Case**: Sorting tasks by priority in Android.

**Reified Types**:
- **Definition**: Allow accessing generic type information at runtime using `inline` functions with `reified` type parameters.
- **Syntax**:
  ```kotlin
  inline fun <reified T> filterType(items: List<Any>): List<T> = items.filterIsInstance<T>()
  ```
- **Example**:
  ```kotlin
  val tasks = listOf(Task(1, "Task", 1), "Other")
  val filtered = filterType<Task>(tasks) // [Task(id=1, title=Task, priority=1)]
  ```
- **Why Important?**: Enables type-safe operations (e.g., type checking) without reflection.
- **Java Equivalent**: Uses reflection (e.g., `item.getClass() == Task.class`), error-prone:
  ```java
  List<Task> filterType(List<Object> items) {
      List<Task> result = new ArrayList<>();
      for (Object item : items) {
          if (item instanceof Task) result.add((Task) item);
      }
      return result;
  }
  ```
- **Use Case**: Filtering tasks by type in Android UI.

**From Your Knowledge**:
- Builds on **functional programming** (inline functions) and **generics** (type parameters).

5. Example: Task Management with Generics
----------------------------------------

Below is a simplified version of your `GenericsDemo.kt` (package `AdvancedKotlin.Generics`), demonstrating all concepts:

```kotlin
package AdvancedKotlin.Generics

data class Task(val id: Int, val title: String)
data class BasicTask(id: Int, title: String) : Task(id, title)

class Repository<T : Task> {
    private val items = mutableListOf<T>()
    fun add(item: T) {
        items.add(item)
        println("Added: $item")
    }
}

interface Processor<T> {
    fun process(item: T): String
}

interface Source<out T : Task> {
    fun get(): T
}

interface Consumer<in T : Task> {
    fun consume(item: T)
}

inline fun <reified T : Task> filterType(items: List<Task>): List<T> = items.filterIsInstance<T>()

fun main() {
    // Generic Class and Function
    val repo = Repository<BasicTask>()
    repo.add(BasicTask(1, "Write code"))
    
    // Generic Interface
    val processor = object : Processor<BasicTask> {
        override fun process(item: BasicTask) = "Processed: ${item.title}"
    }
    println(processor.process(BasicTask(1, "Task")))
    
    // Covariance
    val source: Source<Task> = object : Source<BasicTask> {
        override fun get() = BasicTask(1, "Covariant")
    }
    println("Source: ${source.get()}")
    
    // Contravariance
    val consumer: Consumer<BasicTask> = object : Consumer<Task> {
        override fun consume(item: Task) = println("Consumed: ${item.title}")
    }
    consumer.consume(BasicTask(1, "Contravariant"))
    
    // Reified Type
    val tasks = listOf(Task(1, "Task"), BasicTask(2, "Basic"))
    val filtered = filterType<BasicTask>(tasks)
    println("Filtered: $filtered")
}
```

**Output**:
```
Added: BasicTask(id=1, title=Write code)
Processed: Task
Source: BasicTask(id=1, title=Covariant)
Consumed: Contravariant
Filtered: [BasicTask(id=2, title=Basic)]
```

**Explanation**:
- **Generic Class**: `Repository<T : Task>` stores tasks with a type constraint.
- **Generic Interface**: `Processor<T>` processes tasks.
- **Covariance**: `Source<out T>` allows `Source<BasicTask>` as `Source<Task>`.
- **Contravariance**: `Consumer<in T>` allows `Consumer<Task>` to consume `BasicTask`.
- **Reified Type**: `filterType<T>` filters tasks by type at runtime.

6. Android Relevance
--------------------

- **Generic Classes**: ViewModels handling different data types (e.g., `ViewModel<Task>`).
- **Generic Functions**: Utility functions for lists in RecyclerViews.
- **Variance**: Covariant lists for UI display, contravariant processors for event handling.
- **Type Constraints/Reified Types**: Sorting/filtering data in Room or Jetpack Compose.

**Example**:
```kotlin
class TaskViewModel : ViewModel() {
    private val repo = Repository<Task>()
    fun <T : Task> addTask(task: T) = repo.add(task)
}
```

7. Building on Your Knowledge
-----------------------------

- **OOP**: Generic classes/interfaces use polymorphism.
- **Collections**: Generics power `List<T>`, `Map<K, V>`.
- **Functional Programming**: Reified types use inline functions.
- **Design Patterns**: Generic repositories align with repository pattern.
- **Java**: Kotlinâ€™s generics are more concise than Javaâ€™s.

8. Next Steps
-------------

- **Practice**:
  - Create a generic `TaskProcessor<T : Task>` with a type constraint.
  - Implement a reified function to create instances: `inline fun <reified T : Task> create(): T`.
- **Android**:
  - Use generics in a Jetpack Compose app with a generic ViewModel.
- **Roadmap**:
  - Combine with delegates or sealed classes for advanced patterns.
