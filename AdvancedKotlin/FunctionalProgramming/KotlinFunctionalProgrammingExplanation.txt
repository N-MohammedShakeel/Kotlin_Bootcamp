Kotlin Functional Programming: Detailed Explanation
==================================================

This document provides a comprehensive explanation of Functional Programming (FP) in Kotlin, tailored for a beginner with experience in Kotlin basics, OOP, design patterns, collections, functional programming, coroutines, generics, and Java, interested in Android development. It covers lambdas, higher-order functions, immutability, function types, and functional patterns. The explanation includes examples, Java comparisons, Android use cases, and builds on your `TaskManager` console app experience, aligning with Stage 1: Advanced Kotlin Concepts.

1. What Is Functional Programming?
---------------------------------

Functional Programming is a programming paradigm that treats computation as the evaluation of mathematical functions, emphasizing immutability, pure functions, and declarative code. Kotlin supports FP alongside OOP, making it ideal for Android development.

**Why Use Functional Programming?**
- **Predictability**: Pure functions (no side effects) produce consistent outputs.
- **Immutability**: Reduces bugs by avoiding state changes.
- **Declarative Code**: Focuses on "what" to do, not "how" (e.g., `map` vs. loops).
- **Android Relevance**: Used in Jetpack Compose, Flow, and ViewModels for reactive, concise code.
- **Java Equivalent**: Java 8+ streams and lambdas, but Kotlin’s FP is more integrated.

**From Your Knowledge**:
- Builds on **lambdas** (from your FP basics) and **collections** (e.g., `map`, `filter`).
- Relates to **design patterns** (e.g., chain of responsibility with function composition).

2. Core Functional Programming Concepts
---------------------------------------

**Lambdas**:
- **Definition**: Anonymous functions defined inline, used for concise operations.
- **Syntax**:
  ```kotlin
  val square: (Int) -> Int = { x -> x * x }
  ```
- **Example**:
  ```kotlin
  val tasks = listOf(Task(1, "Task 1", 1), Task(2, "Task 2", 2))
  tasks.forEach { println(it.title) }
  ```
- **Java Equivalent**:
  ```java
  Function<Integer, Integer> square = x -> x * x;
  ```
- **Use Case**: Event handlers in Android UI.

**Higher-Order Functions**:
- **Definition**: Functions that take other functions as parameters or return functions.
- **Syntax**:
  ```kotlin
  fun processTasks(tasks: List<Task>, action: (Task) -> String): List<String> {
      return tasks.map(action)
  }
  ```
- **Example**:
  ```kotlin
  val titles = processTasks(tasks) { it.title }
  ```
- **Java Equivalent**:
  ```java
  List<String> processTasks(List<Task> tasks, Function<Task, String> action) {
      return tasks.stream().map(action).collect(Collectors.toList());
  }
  ```
- **Use Case**: Transforming data in RecyclerViews.

**Immutability**:
- **Definition**: Data that cannot be changed after creation, using `val` or immutable collections.
- **Syntax**:
  ```kotlin
  val tasks = listOf(Task(1, "Task", 1)) // Immutable list
  ```
- **Example**:
  ```kotlin
  val filtered = tasks.filter { it.priority > 0 } // Creates new list
  ```
- **Why Important?**: Prevents unintended state changes, reducing bugs.
- **Java Equivalent**: `Collections.unmodifiableList` or `List.of` (Java 9+).
- **Use Case**: Safe data in ViewModels.

**Function Types**:
- **Definition**: Types representing functions, used for type-safe function references.
- **Syntax**:
  ```kotlin
  val action: (Task) -> String = { it.title }
  ```
- **Example**:
  ```kotlin
  fun execute(action: (Task) -> String, task: Task) = action(task)
  println(execute({ it.title }, Task(1, "Task", 1))) // Task
  ```
- **Java Equivalent**: `Function<T, R>` or `Consumer<T>`.
- **Use Case**: Callbacks in Android APIs.

**Functional Patterns**:
- **Pure Functions**: Functions with no side effects (e.g., `map` transforms without modifying input).
- **Function Composition**: Combining functions:
  ```kotlin
  val toTitle: (Task) -> String = { it.title }
  val toUpper: (String) -> String = { it.toUpperCase() }
  val composed = toTitle andThen toUpper
  ```
- **Monads**: Patterns like `Result` or `Flow` for handling side effects.
- **Example**:
  ```kotlin
  val result = tasks.map(toTitle andThen toUpper)
  ```

3. Example: Task Management with Functional Programming
------------------------------------------------------

Below is a simplified FP example, similar to your `TaskManager`:

```kotlin
package AdvancedKotlin.FunctionalProgramming

data class Task(val id: Int, val title: String, val priority: Int)

class TaskManager {
    private val tasks = listOf(Task(1, "Write code", 1), Task(2, "Test app", 2))
    
    fun filterByPriority(minPriority: Int): List<Task> = tasks.filter { it.priority >= minPriority }
    
    fun mapTitles(transform: (String) -> String): List<String> = tasks.map { transform(it.title) }
}

fun main() {
    val manager = TaskManager()
    
    // Lambdas and Immutability
    val filtered = manager.filterByPriority(2)
    println("Filtered: $filtered")
    
    // Higher-Order Function
    val upperTitles = manager.mapTitles { it.toUpperCase() }
    println("Titles: $upperTitles")
    
    // Function Type
    val toTitle: (Task) -> String = { it.title }
    val toUpper: (String) -> String = { it.toUpperCase() }
    val composed = toTitle andThen toUpper
    println("Composed: ${filtered.map(composed)}")
}
```

**Output**:
```
Filtered: [Task(id=2, title=Test app, priority=2)]
Titles: [WRITE CODE, TEST APP]
Composed: [TEST APP]
```

**Explanation**:
- **Lambdas**: `filter` uses a lambda to select tasks.
- **Higher-Order Function**: `mapTitles` takes a transform function.
- **Immutability**: `tasks` is a `listOf` (immutable).
- **Function Composition**: Combines `toTitle` and `toUpper`.

4. Android Relevance
--------------------

- **Lambdas**: Event listeners in Compose.
- **Higher-Order Functions**: Transform data in ViewModels.
- **Immutability**: Safe state in Compose UI.
- **Function Types**: Define callbacks in APIs.
- **Example**:
  ```kotlin
  @Composable
  fun TaskScreen(tasks: List<Task>, onClick: (Task) -> Unit) {
      LazyColumn {
          items(tasks) { task ->
              Text(task.title, modifier = Modifier.clickable { onClick(task) })
          }
      }
  }
  ```

5. Building on Your Knowledge
-----------------------------

- **OOP**: FP complements classes with declarative logic.
- **Collections**: `map`, `filter` are FP staples.
- **Lambdas**: Core to your prior FP work.
- **Coroutines**: FP patterns in Flow.
- **Java**: Kotlin’s FP is more concise than Java streams.

6. Next Steps
-------------

- **Practice**:
  - Create a pure function to sort tasks by priority.
  - Use function composition for task transformations.
- **Android**:
  - Use FP in a Compose app for data transformations.
- **Roadmap**:
  - Combine with coroutines or generics for reactive patterns.
